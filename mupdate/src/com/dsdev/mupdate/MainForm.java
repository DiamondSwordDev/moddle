/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.dsdev.mupdate;

import com.dsdev.mupdate.resources.Resources;
import com.seaglasslookandfeel.SeaGlassLookAndFeel;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import org.apache.commons.io.FileUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

/**
 *
 * @author LukeSmalley
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupDialog = new javax.swing.JDialog();
        popupDialogCaptionLabel = new javax.swing.JLabel();
        popupDialogOkButton = new javax.swing.JButton();
        popupDialogImageLabel = new javax.swing.JLabel();
        popupDialogYesButton = new javax.swing.JButton();
        breakageDialog = new javax.swing.JDialog();
        breakageDialogCaptionLabel = new javax.swing.JLabel();
        breakageDialogNoButton = new javax.swing.JButton();
        breakageDialogYesButton = new javax.swing.JButton();
        breakageDialogImageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        breakageDialogDescriptionPane = new javax.swing.JTextPane();
        UpdateLogoLabel = new javax.swing.JLabel();
        StatusBar = new javax.swing.JProgressBar();
        StatusLabel = new javax.swing.JLabel();
        NewVersionLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        popupDialog.setMinimumSize(new java.awt.Dimension(505, 143));
        popupDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        popupDialog.setResizable(false);
        popupDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                popupDialogWindowClosed(evt);
            }
        });

        popupDialogCaptionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        popupDialogOkButton.setText("Ok");
        popupDialogOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupDialogOkButtonActionPerformed(evt);
            }
        });

        popupDialogYesButton.setText("Yes");
        popupDialogYesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupDialogYesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout popupDialogLayout = new javax.swing.GroupLayout(popupDialog.getContentPane());
        popupDialog.getContentPane().setLayout(popupDialogLayout);
        popupDialogLayout.setHorizontalGroup(
            popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(popupDialogLayout.createSequentialGroup()
                        .addComponent(popupDialogImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(popupDialogCaptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, popupDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(popupDialogYesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popupDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        popupDialogLayout.setVerticalGroup(
            popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, popupDialogLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(popupDialogCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(popupDialogImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popupDialogOkButton)
                    .addComponent(popupDialogYesButton))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        breakageDialog.setMinimumSize(new java.awt.Dimension(505, 371));
        breakageDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        breakageDialog.setResizable(false);
        breakageDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                breakageDialogWindowClosed(evt);
            }
        });

        breakageDialogCaptionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        breakageDialogCaptionLabel.setText("The update will break the following features\n.  Do you wish to proceed?");

        breakageDialogNoButton.setText("No");
        breakageDialogNoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakageDialogNoButtonActionPerformed(evt);
            }
        });

        breakageDialogYesButton.setText("Yes");
        breakageDialogYesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakageDialogYesButtonActionPerformed(evt);
            }
        });

        breakageDialogDescriptionPane.setEditable(false);
        jScrollPane1.setViewportView(breakageDialogDescriptionPane);

        javax.swing.GroupLayout breakageDialogLayout = new javax.swing.GroupLayout(breakageDialog.getContentPane());
        breakageDialog.getContentPane().setLayout(breakageDialogLayout);
        breakageDialogLayout.setHorizontalGroup(
            breakageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(breakageDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(breakageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(breakageDialogLayout.createSequentialGroup()
                        .addComponent(breakageDialogImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(breakageDialogCaptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, breakageDialogLayout.createSequentialGroup()
                        .addGap(0, 315, Short.MAX_VALUE)
                        .addComponent(breakageDialogYesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(breakageDialogNoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        breakageDialogLayout.setVerticalGroup(
            breakageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(breakageDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(breakageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(breakageDialogImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(breakageDialogCaptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(breakageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breakageDialogNoButton)
                    .addComponent(breakageDialogYesButton))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MUpdate");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        StatusBar.setIndeterminate(true);

        StatusLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        StatusLabel.setText("Initializing...");

        NewVersionLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        NewVersionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NewVersionLabel.setText("...");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Please wait while Moddle is updated to version");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UpdateLogoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NewVersionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addComponent(StatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(230, 230, 230)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(14, 14, 14)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UpdateLogoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(NewVersionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(StatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(StatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(jLabel2)
                    .addContainerGap(141, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private static String[] Arguments;
    
    private final int RESULT_OK = 0;
    private final int RESULT_NO = 0;
    private final int RESULT_YES = 1;
    
    private int DialogResult = -1;
    
    private int showPopupDialog(String message) {
        popupDialog.setLocationRelativeTo(null);

        popupDialogYesButton.setVisible(false);
        popupDialogOkButton.setText("Ok");

        popupDialogCaptionLabel.setText("<html><body style='width: 300px'>" + message + "</body></html>");
        
        popupDialog.setVisible(true);
        
        while (DialogResult < 0) { }
        
        int returnValue = DialogResult;
        DialogResult = -1;
        
        return returnValue;
    }
    
    private int showYesNoDialog(String message) {
        popupDialog.setLocationRelativeTo(null);

        popupDialogYesButton.setVisible(true);
        popupDialogOkButton.setText("No");

        popupDialogCaptionLabel.setText("<html><body style='width: 300px'>" + message + "</body></html>");
        
        popupDialog.setVisible(true);
        
        while (DialogResult < 0) { }
        
        int returnValue = DialogResult;
        DialogResult = -1;
        
        return returnValue;
    }
    
    private int showBreakageDialog(String message) {
        breakageDialog.setLocationRelativeTo(null);
        breakageDialogDescriptionPane.setText(message);
        
        breakageDialog.setVisible(true);
        
        while (DialogResult < 0) { }
        
        int returnValue = DialogResult;
        DialogResult = -1;
        
        return returnValue;
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Set location
        this.setLocationRelativeTo(null);

        //Set icons
        this.setIconImage(Resources.getImageResource("icon.png").getImage());
        popupDialog.setIconImage(Resources.getImageResource("icon.png").getImage());
        breakageDialog.setIconImage(Resources.getImageResource("icon.png").getImage());
        
        //Set dialog images
        UpdateLogoLabel.setIcon(Resources.getImageResource("update.png"));
        popupDialogImageLabel.setIcon(Resources.getImageResource("alert.png"));
        breakageDialogImageLabel.setIcon(Resources.getImageResource("alert_small.png"));
        
        SimpleSwingWorker worker = new SimpleSwingWorker() {
            
            @Override
            protected void task() {
                
                //Init variables
                String targetVersion = "latest";
                String currentVersion = null;
                boolean installCompleteVersion = true;
                
                //Determine version to install
                if (Arguments.length < 1) {
                    if (!(new File("../data/version.json").isFile())) {
                        if (showYesNoDialog("Hello!  It looks like this is your first time running Moddle.  Would you like to download and install it now?") == RESULT_NO) {
                            showPopupDialog("Installation was cancelled.");
                            System.exit(0);
                        } else {
                            targetVersion = "latest";
                            installCompleteVersion = true;
                        }
                    } else {
                        if (showYesNoDialog("An update version was not found automagically.  Would you like to install the latest version?") == RESULT_NO) {
                            showPopupDialog("Installation was cancelled.");
                            System.exit(0);
                        } else {
                            targetVersion = "latest";
                            installCompleteVersion = false;
                        }
                    }
                } else {
                    targetVersion = Arguments[0];
                    installCompleteVersion = false;
                    for (String arg : Arguments) {
                        if (arg.equals("--complete")) {
                            installCompleteVersion = true;
                        }
                    }
                }
                
                //Display version to install
                NewVersionLabel.setText(targetVersion);
                
                //Tell the user stuff
                StatusLabel.setText("Getting installed version...");
                
                //Determine the currently installed version
                JSONObject currentVersionConfig;
                try {
                    currentVersionConfig = (JSONObject)JSONValue.parse(FileUtils.readFileToString(new File("../data/version.json")));
                    currentVersion = currentVersionConfig.get("version").toString();
                } catch (IOException ex) {
                    installCompleteVersion = true;
                }
                
                //Tell the user stuff
                StatusLabel.setText("Getting index of available versions...");
                
                //Download the version index file
                try {
                    FileUtils.copyURLToFile(new URL("https://sites.google.com/site/moddlerepo/versions.json"), new File("./versions.json"));
                } catch (IOException ex) {
                    showPopupDialog("Error:  Failed to download the version index!");
                    System.exit(0);
                }
                
                //Load the version index file
                JSONObject versionsConfig = null;
                try {
                    versionsConfig = (JSONObject)JSONValue.parse(FileUtils.readFileToString(new File("./versions.json")));
                } catch (IOException ex) {
                    showPopupDialog("Error:  Failed to load the version index file!");
                    System.exit(0);
                }
                
                //Get versions
                JSONArray versionsArray = (JSONArray)versionsConfig.get("versions");
                
                //Get latest version if necessary
                if (targetVersion.equals("latest")) {
                    targetVersion = versionsConfig.get("latestversion").toString();
                }
                
                //Display version to install
                NewVersionLabel.setText(targetVersion);
                
                if (installCompleteVersion) {
                    
                    //<editor-fold defaultstate="collapsed" desc="Install Complete Version">
                    
                    //Find the specified version
                    for (Object obj : versionsArray) {
                        JSONObject versionObj = (JSONObject)obj;
                        if (versionObj.get("name").equals(targetVersion)) {
                            
                            //Tell the user stuff
                            StatusLabel.setText("Downloading version '" + targetVersion + "'...");
                            
                            //Download the archive
                            try {
                                FileUtils.copyURLToFile(new URL(versionObj.get("complete").toString()), new File("./" + targetVersion + "-complete.zip"));
                            } catch (IOException ex) {
                                showPopupDialog("Error:  Failed to download the update!");
                                System.exit(0);
                            }
                            
                            //Tell the user stuff
                            StatusLabel.setText("Installing the update...");
                            
                            //Extract the archive
                            try {
                                ZipFile zip = new ZipFile("./" + targetVersion + "-complete.zip");
                                zip.extractAll("..");
                            } catch (ZipException ex) {
                                showPopupDialog("Error:  Failed to install the update!");
                                System.exit(0);
                            }
                            
                            //Update the installation version
                            try {
                                JSONObject newVersionConfig = new JSONObject();
                                newVersionConfig.put("version", targetVersion);
                                FileUtils.writeStringToFile(new File("../data/version.json"), newVersionConfig.toJSONString());
                            } catch (IOException ex) {
                                showPopupDialog("Warning:  Failed to write new version to 'version.json'!  (This could be very bad!)");
                            }
                            
                            //Tell the user stuff
                            StatusLabel.setText("Done!");
                            
                            break;
                        }
                    }
                    
                    //</editor-fold>
                    
                } else {
                    
                    //<editor-fold defaultstate="collapsed" desc="Install Patches">
                    
                    //Init variables
                    List<String> versionsToInstall = new ArrayList();
                    String breakMessage = "";
                    
                    //Build patch list
                    boolean recordingEntries = false;
                    for (Object obj : versionsArray) {
                        JSONObject versionObj = (JSONObject)obj;
                        
                        if (versionObj.get("name").equals(targetVersion)) {
                            recordingEntries = true;
                        } else if (versionObj.get("name").equals(currentVersion)) {
                            recordingEntries = false;
                        }
                        
                        if (recordingEntries) {
                            versionsToInstall.add(versionObj.get("name").toString());
                            if (versionObj.get("breaks") != null) {
                                breakMessage += "Expected broken features for version " + versionObj.get("name").toString() + ":\n";
                                for (Object b : (JSONArray)versionObj.get("breaks")) {
                                    breakMessage += "- " + b.toString() + "\n";
                                }
                                breakMessage += "\n";
                            }
                        }
                    }
                    
                    if (!breakMessage.equals("")) {
                        if (showBreakageDialog(breakMessage) == RESULT_NO) {
                            showPopupDialog("Installation was cancelled.");
                            System.exit(0);
                        }
                    }
                    
                    //<editor-fold defaultstate="collapsed" desc="Install Patches From List">
                    
                    //Install all patches
                    for (String patchName : versionsToInstall) {
                        
                        //Find the specified version
                        for (Object obj : versionsArray) {
                            JSONObject versionObj = (JSONObject)obj;
                            if (versionObj.get("name").equals(patchName)) {

                                //Tell the user stuff
                                StatusLabel.setText("Downloading version '" + patchName + "'...");

                                //Download the archive
                                try {
                                    FileUtils.copyURLToFile(new URL(versionObj.get("complete").toString()), new File("./" + patchName + "-complete.zip"));
                                } catch (IOException ex) {
                                    showPopupDialog("Error:  Failed to download the update!");
                                    System.exit(0);
                                }

                                //Tell the user stuff
                                StatusLabel.setText("Installing the update...");

                                //Extract the archive
                                try {
                                    ZipFile zip = new ZipFile("./" + patchName + "-complete.zip");
                                    zip.extractAll("..");
                                } catch (ZipException ex) {
                                    showPopupDialog("Error:  Failed to install the update!");
                                    System.exit(0);
                                }

                                break;
                            }
                        }
                        
                        //Update the installation version
                        try {
                            JSONObject newVersionConfig = new JSONObject();
                            newVersionConfig.put("version", patchName);
                            FileUtils.writeStringToFile(new File("../data/version.json"), newVersionConfig.toJSONString());
                        } catch (IOException ex) {
                            showPopupDialog("Warning:  Failed to write new version to 'version.json'!  (This could be very bad!)");
                        }
                        
                        //Tell the user stuff
                        StatusLabel.setText("Done!");
                        
                    }
                    
                    //</editor-fold>
                    
                    //</editor-fold>
                    
                }
                
                showPopupDialog("Moddle was successfully updated to version " + targetVersion + "!");
                System.exit(0);
            }
            
        };
        
        worker.execute();
    }//GEN-LAST:event_formWindowOpened

    private void popupDialogOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupDialogOkButtonActionPerformed
        DialogResult = 0;
        popupDialog.setVisible(false);
    }//GEN-LAST:event_popupDialogOkButtonActionPerformed

    private void popupDialogYesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupDialogYesButtonActionPerformed
        DialogResult = 1;
        popupDialog.setVisible(false);
    }//GEN-LAST:event_popupDialogYesButtonActionPerformed

    private void breakageDialogNoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakageDialogNoButtonActionPerformed
        DialogResult = 0;
        breakageDialog.setVisible(false);
    }//GEN-LAST:event_breakageDialogNoButtonActionPerformed

    private void breakageDialogYesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakageDialogYesButtonActionPerformed
        DialogResult = 1;
        breakageDialog.setVisible(false);
    }//GEN-LAST:event_breakageDialogYesButtonActionPerformed

    private void breakageDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_breakageDialogWindowClosed
        DialogResult = 0;
        breakageDialog.setVisible(false);
    }//GEN-LAST:event_breakageDialogWindowClosed

    private void popupDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_popupDialogWindowClosed
        DialogResult = 0;
        popupDialog.setVisible(false);
    }//GEN-LAST:event_popupDialogWindowClosed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Arguments = args;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            SeaGlassLookAndFeel sglaf = new SeaGlassLookAndFeel();
            javax.swing.UIManager.setLookAndFeel(sglaf);
            
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NewVersionLabel;
    private javax.swing.JProgressBar StatusBar;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JLabel UpdateLogoLabel;
    private javax.swing.JDialog breakageDialog;
    private javax.swing.JLabel breakageDialogCaptionLabel;
    private javax.swing.JTextPane breakageDialogDescriptionPane;
    private javax.swing.JLabel breakageDialogImageLabel;
    private javax.swing.JButton breakageDialogNoButton;
    private javax.swing.JButton breakageDialogYesButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog popupDialog;
    private javax.swing.JLabel popupDialogCaptionLabel;
    private javax.swing.JLabel popupDialogImageLabel;
    private javax.swing.JButton popupDialogOkButton;
    private javax.swing.JButton popupDialogYesButton;
    // End of variables declaration//GEN-END:variables
}
