package com.dsdev.moddle;

import com.dsdev.moddle.auth.Auth;
import com.seaglasslookandfeel.SeaGlassLookAndFeel;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import net.lingala.zip4j.exception.ZipException;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.json.simple.JSONObject;

/**
 * The main GUI
 *
 * @author Diamond Sword Development
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressDialog = new javax.swing.JDialog();
        progressDialogStatusBar = new javax.swing.JProgressBar();
        progressDialogStatusLabel = new javax.swing.JLabel();
        loginDialog = new javax.swing.JDialog();
        loginDialogUsernameLabel = new javax.swing.JLabel();
        loginDialogPasswordLabel = new javax.swing.JLabel();
        loginDialogUsernameBox = new javax.swing.JTextField();
        loginDialogPasswordBox = new javax.swing.JPasswordField();
        loginDialogLoginButton = new javax.swing.JButton();
        loginDialogCancelButton = new javax.swing.JButton();
        popupDialog = new javax.swing.JDialog();
        popupDialogCaptionLabel = new javax.swing.JLabel();
        popupDialogOkButton = new javax.swing.JButton();
        popupDialogImageLabel = new javax.swing.JLabel();
        instanceDialog = new javax.swing.JDialog();
        instanceDialogCreateButton = new javax.swing.JButton();
        instanceDialogNameLabel = new javax.swing.JLabel();
        instanceDialogNameBox = new javax.swing.JTextField();
        instanceDialogModpackLabel = new javax.swing.JLabel();
        instanceDialogModpackComboBox = new javax.swing.JComboBox();
        instanceDialogCancelButton = new javax.swing.JButton();
        MainTabPane = new javax.swing.JTabbedPane();
        ModpackPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ModpackList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        ModpackDescriptionPane = new javax.swing.JTextPane();
        NewsPanel = new javax.swing.JPanel();
        SettingsPanel = new javax.swing.JPanel();
        CurrentUserLabel = new javax.swing.JLabel();
        LoginButton = new javax.swing.JButton();
        InstanceComboBox = new javax.swing.JComboBox();
        DeleteInstanceButton = new javax.swing.JButton();
        InstanceLabel = new javax.swing.JLabel();
        CreateInstanceButton = new javax.swing.JButton();
        ForceUpdateCheckBox = new javax.swing.JCheckBox();
        PlayButton = new javax.swing.JButton();

        progressDialog.setMinimumSize(new java.awt.Dimension(430, 100));
        progressDialog.setResizable(false);
        progressDialog.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                progressDialogWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                progressDialogWindowLostFocus(evt);
            }
        });
        progressDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                progressDialogWindowOpened(evt);
            }
        });

        progressDialogStatusLabel.setText("Smoke...");

        javax.swing.GroupLayout progressDialogLayout = new javax.swing.GroupLayout(progressDialog.getContentPane());
        progressDialog.getContentPane().setLayout(progressDialogLayout);
        progressDialogLayout.setHorizontalGroup(
            progressDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressDialogStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressDialogStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                .addContainerGap())
        );
        progressDialogLayout.setVerticalGroup(
            progressDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressDialogStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressDialogStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loginDialog.setTitle("Log In");
        loginDialog.setMinimumSize(new java.awt.Dimension(400, 130));
        loginDialog.setModal(true);
        loginDialog.setResizable(false);
        loginDialog.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                loginDialogWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                loginDialogWindowLostFocus(evt);
            }
        });
        loginDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                loginDialogWindowOpened(evt);
            }
        });

        loginDialogUsernameLabel.setText("Username:");

        loginDialogPasswordLabel.setText("Password:");

        loginDialogLoginButton.setText("Log In");
        loginDialogLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginDialogLoginButtonActionPerformed(evt);
            }
        });

        loginDialogCancelButton.setText("Cancel");
        loginDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginDialogCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginDialogLayout = new javax.swing.GroupLayout(loginDialog.getContentPane());
        loginDialog.getContentPane().setLayout(loginDialogLayout);
        loginDialogLayout.setHorizontalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginDialogLayout.createSequentialGroup()
                        .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginDialogUsernameLabel)
                            .addComponent(loginDialogPasswordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginDialogUsernameBox, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                            .addComponent(loginDialogPasswordBox)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(loginDialogLoginButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginDialogCancelButton)))
                .addContainerGap())
        );
        loginDialogLayout.setVerticalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginDialogUsernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginDialogUsernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginDialogPasswordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginDialogPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginDialogLoginButton)
                    .addComponent(loginDialogCancelButton))
                .addContainerGap())
        );

        popupDialog.setMinimumSize(new java.awt.Dimension(396, 142));
        popupDialog.setResizable(false);
        popupDialog.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                popupDialogWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                popupDialogWindowLostFocus(evt);
            }
        });
        popupDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                popupDialogWindowOpened(evt);
            }
        });

        popupDialogOkButton.setText("Ok");
        popupDialogOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupDialogOkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout popupDialogLayout = new javax.swing.GroupLayout(popupDialog.getContentPane());
        popupDialog.getContentPane().setLayout(popupDialogLayout);
        popupDialogLayout.setHorizontalGroup(
            popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(popupDialogLayout.createSequentialGroup()
                        .addComponent(popupDialogImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(popupDialogCaptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, popupDialogLayout.createSequentialGroup()
                        .addGap(0, 294, Short.MAX_VALUE)
                        .addComponent(popupDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        popupDialogLayout.setVerticalGroup(
            popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupDialogLayout.createSequentialGroup()
                .addGroup(popupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(popupDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(popupDialogImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(popupDialogLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(popupDialogCaptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(popupDialogOkButton)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        instanceDialog.setMinimumSize(new java.awt.Dimension(409, 154));
        instanceDialog.setResizable(false);
        instanceDialog.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                instanceDialogWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                instanceDialogWindowLostFocus(evt);
            }
        });
        instanceDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                instanceDialogWindowOpened(evt);
            }
        });

        instanceDialogCreateButton.setText("Create");
        instanceDialogCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instanceDialogCreateButtonActionPerformed(evt);
            }
        });

        instanceDialogNameLabel.setText("Instance Name:");

        instanceDialogModpackLabel.setText("Modpack:");

        instanceDialogModpackComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<None>" }));

        instanceDialogCancelButton.setText("Cancel");
        instanceDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instanceDialogCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout instanceDialogLayout = new javax.swing.GroupLayout(instanceDialog.getContentPane());
        instanceDialog.getContentPane().setLayout(instanceDialogLayout);
        instanceDialogLayout.setHorizontalGroup(
            instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instanceDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(instanceDialogLayout.createSequentialGroup()
                        .addComponent(instanceDialogCreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(instanceDialogCancelButton))
                    .addGroup(instanceDialogLayout.createSequentialGroup()
                        .addGroup(instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(instanceDialogNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(instanceDialogModpackLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(instanceDialogModpackComboBox, 0, 300, Short.MAX_VALUE)
                            .addComponent(instanceDialogNameBox))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        instanceDialogLayout.setVerticalGroup(
            instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, instanceDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instanceDialogNameLabel)
                    .addComponent(instanceDialogNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instanceDialogModpackComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instanceDialogModpackLabel))
                .addGap(18, 18, 18)
                .addGroup(instanceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instanceDialogCreateButton)
                    .addComponent(instanceDialogCancelButton))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Moddle Launcher");
        setMinimumSize(new java.awt.Dimension(900, 501));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        MainTabPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        MainTabPane.setName(""); // NOI18N

        ModpackList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ModpackList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ModpackListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ModpackList);

        ModpackDescriptionPane.setEditable(false);
        ModpackDescriptionPane.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(ModpackDescriptionPane);

        javax.swing.GroupLayout ModpackPanelLayout = new javax.swing.GroupLayout(ModpackPanel);
        ModpackPanel.setLayout(ModpackPanelLayout);
        ModpackPanelLayout.setHorizontalGroup(
            ModpackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ModpackPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE))
        );
        ModpackPanelLayout.setVerticalGroup(
            ModpackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );

        MainTabPane.addTab("Modpacks", ModpackPanel);

        javax.swing.GroupLayout NewsPanelLayout = new javax.swing.GroupLayout(NewsPanel);
        NewsPanel.setLayout(NewsPanelLayout);
        NewsPanelLayout.setHorizontalGroup(
            NewsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 951, Short.MAX_VALUE)
        );
        NewsPanelLayout.setVerticalGroup(
            NewsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 409, Short.MAX_VALUE)
        );

        MainTabPane.addTab("News", NewsPanel);

        javax.swing.GroupLayout SettingsPanelLayout = new javax.swing.GroupLayout(SettingsPanel);
        SettingsPanel.setLayout(SettingsPanelLayout);
        SettingsPanelLayout.setHorizontalGroup(
            SettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 951, Short.MAX_VALUE)
        );
        SettingsPanelLayout.setVerticalGroup(
            SettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 409, Short.MAX_VALUE)
        );

        MainTabPane.addTab("Settings", SettingsPanel);

        CurrentUserLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CurrentUserLabel.setText("Loading...");

        LoginButton.setText("Log Out");
        LoginButton.setEnabled(false);
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        InstanceComboBox.setEnabled(false);
        InstanceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstanceComboBoxActionPerformed(evt);
            }
        });

        DeleteInstanceButton.setText("Delete");
        DeleteInstanceButton.setEnabled(false);
        DeleteInstanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteInstanceButtonActionPerformed(evt);
            }
        });

        InstanceLabel.setText("Instance:");

        CreateInstanceButton.setText("Create");
        CreateInstanceButton.setEnabled(false);
        CreateInstanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateInstanceButtonActionPerformed(evt);
            }
        });

        ForceUpdateCheckBox.setText("Force Update");

        PlayButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        PlayButton.setForeground(new java.awt.Color(0, 0, 51));
        PlayButton.setText("Play");
        PlayButton.setEnabled(false);
        PlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LoginButton)
                    .addComponent(CurrentUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(InstanceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InstanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(CreateInstanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteInstanceButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ForceUpdateCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(MainTabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainTabPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrentUserLabel)
                    .addComponent(InstanceLabel)
                    .addComponent(InstanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PlayButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginButton)
                    .addComponent(CreateInstanceButton)
                    .addComponent(DeleteInstanceButton)
                    .addComponent(ForceUpdateCheckBox))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void loadModpackList() {
        DefaultListModel modpackListModel = new DefaultListModel();
        instanceDialogModpackComboBox.removeAllItems();
        if (new File("./packs").isDirectory()) {
            for (File f : new File("./packs").listFiles()) {
                if (f.isDirectory()) {
                    modpackListModel.addElement(f.getName());
                    instanceDialogModpackComboBox.addItem(f.getName());
                }
            }
        } else {
            Logger.info("MainForm.loadModpackList", "Creating packs directory...");
            (new File("./packs")).mkdirs();
        }
        ModpackList.setModel(modpackListModel);
    }
    
    private void loadUserInstances(String accountName) {
        if (accountName == null) {
            InstanceComboBox.removeAllItems();
            InstanceComboBox.addItem("<None>");
            InstanceComboBox.setSelectedIndex(0);
            return;
        }
        
        String friendlyAccountName = getFriendlyName(accountName);
        
        InstanceComboBox.removeAllItems();
        InstanceComboBox.addItem("<None>");
        
        if (new File("./users/" + friendlyAccountName).isDirectory()) {
            for (File f : new File("./users/" + friendlyAccountName).listFiles()) {
                if (f.isDirectory()) {
                    InstanceComboBox.addItem(f.getName());
                }
            }
            
            loadLastPlayed(accountName);
        } else {
            (new File("./users/" + friendlyAccountName)).mkdirs();
        }
        
    }
    
    private void loadLastPlayed(String accountName) {
        if (new File("./users/" + getFriendlyName(accountName) + "/lastplayed.json").isFile()) {
            try {
                JSONObject lastPlayedConfig = Util.readJSONFile("./users/" + getFriendlyName(accountName) + "/lastplayed.json");
                InstanceComboBox.setSelectedItem(lastPlayedConfig.get("instance").toString());
            } catch (IOException ex) {
                Logger.error("MainForm.loadLastPlayedInstance", "Failed to load 'lastplayed.json' file!", false, ex.getMessage());
                InstanceComboBox.setSelectedIndex(0);
            }
        } else {
            JSONObject lastPlayedConfig = new JSONObject();
            lastPlayedConfig.put("instance", "<None>");
            try {
                FileUtils.writeStringToFile(new File("./users/" + getFriendlyName(accountName) + "/lastplayed.json"), lastPlayedConfig.toJSONString());
            } catch (IOException ex) {
                Logger.error("MainForm.loadLastPlayedInstance", "Failed to create 'lastplayed.json' file!", false, ex.getMessage());
            }
            InstanceComboBox.setSelectedIndex(0);
        }
    }
    
    private String getFriendlyName(String accountName) {
        return accountName.replace("@", "__").replace(".", "__");
    }
    
    private void enablePlayControls() {
        PlayButton.setEnabled(true);
        ForceUpdateCheckBox.setEnabled(true);
        InstanceLabel.setEnabled(true);
        InstanceComboBox.setEnabled(true);
        CreateInstanceButton.setEnabled(true);
        DeleteInstanceButton.setEnabled(true);
    }
    
    private void disablePlayControls() {
        PlayButton.setEnabled(false);
        ForceUpdateCheckBox.setEnabled(false);
        InstanceLabel.setEnabled(false);
        InstanceComboBox.setEnabled(false);
        CreateInstanceButton.setEnabled(false);
        DeleteInstanceButton.setEnabled(false);
    }
    
    private void loadModpackPaneContent(String contentLocation) {
        
        if (!new File(contentLocation + "/description.txt").exists()) {
            //This line was a really bad idea...
            contentLocation = "./data/content/nodesc";
            //Wait... how in the name of Notch did I just assign to a parameter variable?!?
        }
        
        try {
            List<String> contentLines = FileUtils.readLines(new File(contentLocation + "/description.txt"));
            SimpleAttributeSet keyWord = new SimpleAttributeSet();
            ModpackDescriptionPane.setText("");

            for (String line : contentLines) {

                if (line.startsWith("$[[") && line.endsWith("]]")) {
                    String styleString = line.substring(3, line.length() - 2);
                    for (String style : styleString.split(",")) {

                        String styleArg = style;
                        String styleValue = "";

                        try {
                            styleArg = style.split(":")[0];
                            styleValue = style.split(":")[1];
                        } catch (Exception ex) { }

                        if (styleArg.equalsIgnoreCase("image")) {
                            ModpackDescriptionPane.insertIcon(new ImageIcon(contentLocation + "/" + styleValue));
                            ModpackDescriptionPane.getStyledDocument().insertString(ModpackDescriptionPane.getStyledDocument().getLength(), "\n", keyWord);
                        } else if (styleArg.equalsIgnoreCase("reset")) {
                            keyWord = new SimpleAttributeSet();
                        } else {
                            try {
                                for (Method m : StyleConstants.class.getMethods()) {
                                    if (m.getName().toLowerCase().equalsIgnoreCase("set" + styleArg)) {
                                        if (styleValue.equalsIgnoreCase("true") || styleValue.equalsIgnoreCase("false")) {
                                            m.invoke(null, new Object[] { keyWord, styleValue.equalsIgnoreCase("true") });
                                        } else if (Util.isNumeric(styleValue)) {
                                            m.invoke(null, new Object[] { keyWord, Integer.parseInt(styleValue) });
                                        } else {
                                            m.invoke(null, new Object[] { keyWord, styleValue });
                                        }
                                    }
                                }
                            } catch (Exception ex) {
                                
                            }
                        }

                    }
                } else {
                    ModpackDescriptionPane.getStyledDocument().insertString(ModpackDescriptionPane.getStyledDocument().getLength(), line + "\n", keyWord);
                }

            }
        } catch (Exception ex) {
            Logger.error("MainForm.loadModpackPaneContent", "Failed to load content!", false, ex.getMessage());
        }

        ModpackDescriptionPane.setCaretPosition(0);
        
    }
    
    
    private void loadSelfExtractingData() {
        if (!new File("./data").isDirectory()) {
            
            Logger.info("MainForm.loadDataFromResource", "Copying 'data.zip'...");
            
            try {
                IOUtils.copy(this.getClass().getResourceAsStream("data.zip"), new FileOutputStream("./data.zip"));
            } catch (IOException ex) {
                Logger.error("MainForm.loadDataFromResource", "Failed to copy the data archive file!", true, ex.getMessage());
            }

            Logger.info("MainForm.loadDataFromResource", "Extracting 'data.zip'...");

            try {
                Util.decompressZipfile("./data.zip", "./");
            } catch (ZipException ex) {
                Logger.error("MainForm.loadDataFromResource", "Failed to extract the data archive file!", true, ex.getMessage());
            }
        }
    }
    
    private void loadDataFromResource() {
        
        Logger.info("MainForm.loadDataFromResource", "Initializing...");
        Logger.setProgress(0);
        progressDialog.setVisible(true);
        progressDialog.setLocationRelativeTo(null);
        
        SwingWorker worker = new SwingWorker() {

            @Override
            protected void done() {
                progressDialog.setVisible(false);
            }

            @Override
            protected void process(List chunks) {
                
            }

            @Override
            protected Object doInBackground() {
                
                Logger.info("MainForm.loadDataFromResource", "Copying 'data.zip'...");
                Logger.setProgress(20);
                
                
                
                Logger.info("MainForm.loadDataFromResource", "Done!");
                Logger.setProgress(100);
                
                progressDialog.setVisible(false);
                return null;
            }
        };

        worker.execute();
        
    }

    
    private void ModpackListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ModpackListValueChanged
        if (ModpackList.getSelectedValue() == null) {
            //loadModpackPaneContent("./data/content/nopack");
        } else {
            loadModpackPaneContent("./packs/" + ModpackList.getSelectedValue().toString());
        }
    }//GEN-LAST:event_ModpackListValueChanged

    private void InstanceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstanceComboBoxActionPerformed
        try {
            if (!InstanceComboBox.getSelectedItem().toString().equals("<None>")) {
                String item = InstanceComboBox.getSelectedItem().toString();
                try {
                    JSONObject instanceConfig = Util.readJSONFile("./users/" + getFriendlyName(Auth.AccountName) + "/" + item + "/instance.json");
                    loadModpackPaneContent("./packs/" + instanceConfig.get("pack").toString());
                } catch (IOException ex) {
                    Logger.error("MainForm.formWindowOpened", "Failed to load instance config!", false, ex.getMessage());
                    loadModpackPaneContent("./data/content/nodesc");
                }
            } else {
                loadModpackPaneContent("./data/content/nopack");
            }
        } catch (Exception ex) { }
    }//GEN-LAST:event_InstanceComboBoxActionPerformed


    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
        if (LoginButton.getText().equals("Log In")) {
            loginDialog.setVisible(true);
        } else {
            Auth.performLogout();
            Auth.saveToFile();
            loadUserInstances(null);
            LoginButton.setText("Log In");
            CurrentUserLabel.setText("-- Please Log In --");
            disablePlayControls();
        }
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void DeleteInstanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteInstanceButtonActionPerformed
        if (!InstanceComboBox.getSelectedItem().toString().equals("<None>")) {
            try {
                FileUtils.deleteDirectory(new File("./users/" + getFriendlyName(Auth.AccountName) + "/" + InstanceComboBox.getSelectedItem().toString()));
            } catch (IOException ex) {
                Logger.error("MainForm.DeleteInstanceButtonActionPerformed", "Could not delete instance!", false, ex.getMessage());
                return;
            }
            loadUserInstances(Auth.AccountName);
            InstanceComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_DeleteInstanceButtonActionPerformed

    private void CreateInstanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateInstanceButtonActionPerformed
        instanceDialog.setVisible(true);
    }//GEN-LAST:event_CreateInstanceButtonActionPerformed

    private void PlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayButtonActionPerformed

        Logger.info("MainForm.PlayButtonActionPerformed", "Starting execution...");
        Logger.setProgress(0);
        progressDialog.setVisible(true);
        progressDialog.setLocationRelativeTo(null);
        
        SwingWorker worker = new SwingWorker() {

            @Override
            protected void done() {
                progressDialog.setVisible(false);
            }

            @Override
            protected void process(List chunks) {
                //for (Object o : chunks) {
                //    consolePane.setText(consolePane.getText() + (String)o + "\n");
                //}
            }

            @Override
            protected Object doInBackground() {
                
                Auth.saveToFile();

                if (CurrentUserLabel.getText().endsWith("-->")) {
                    Logger.error("MainForm.PlayButtonActionPerformed", "No valid login given!", true, "None");
                    return null;
                }

                if (InstanceComboBox.getSelectedItem().toString().equals("<None>")) {
                    Logger.error("MainForm.PlayButtonActionPerformed", "No instance selected!", true, "None");
                    return null;
                }

                Logger.info("MainForm.PlayButtonActionPerformed", "Invoking pack builder...");
                Modpack pack = new Modpack(InstanceComboBox.getSelectedItem().toString(), CurrentUserLabel.getText().replace("@", "_"), ForceUpdateCheckBox.isSelected());

                if (!pack.IsInstallComplete) {
                    pack.build();
                } else if (ForceUpdateCheckBox.isSelected()) {
                    pack.build();
                }

                Logger.info("MainForm.PlayButtonActionPerformed", "Preparing to launch modpack...");
                if (pack.run()) {
                    System.exit(0);
                } else {
                    progressDialog.setVisible(false);
                    //setLoadingSpinnerVisible(false);
                }
                
                return null;
            }
        };

        worker.execute();
    }//GEN-LAST:event_PlayButtonActionPerformed


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        Logger.begin();
        
        Logger.info("MainForm.formWindowOpened", "Setting frame properties...");
        
        this.getContentPane().setBackground(new Color(152, 174, 196));
        this.setLocationRelativeTo(null);
        
        this.setIconImage((new ImageIcon(this.getClass().getResource("icon_mb.png"))).getImage());
        progressDialog.setIconImage((new ImageIcon(this.getClass().getResource("icon_mb.png"))).getImage());
        loginDialog.setIconImage((new ImageIcon(this.getClass().getResource("icon_mb.png"))).getImage());
        popupDialog.setIconImage((new ImageIcon(this.getClass().getResource("icon_mb.png"))).getImage());
        popupDialogImageLabel.setIcon(new ImageIcon("./data/content/alert.png"));
        instanceDialog.setIconImage((new ImageIcon(this.getClass().getResource("icon_mb.png"))).getImage());
        
        ModpackList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (new File("./packs/" + value.toString() + "/pack.png").isFile()) {
                    label.setIcon(new ImageIcon("./packs/" + value.toString() + "/pack.png"));
                } else {
                    label.setIcon(new ImageIcon("./data/content/noicon.png"));
                }
                return label;
            }
        });
        
        Dialogs.popupDialog = popupDialog;
        Dialogs.popupDialogCaptionLabel = popupDialogCaptionLabel;
        Dialogs.progressDialog = progressDialog;
        Dialogs.progressDialogStatusBar = progressDialogStatusBar;
        Dialogs.progressDialogStatusLabel = progressDialogStatusLabel;
        
        
        Logger.info("MainForm.formWindowOpened", "Loading modpacks...");
        loadModpackList();
        
        
        Logger.info("MainForm.formWindowOpened", "Restoring last login...");
        Auth.loadFromFile();
        if (Auth.isLoggedIn) {
            if (Auth.performLogin(null, null)) {
                CurrentUserLabel.setText(Auth.Username);
                LoginButton.setText("Log Out");
                enablePlayControls();
            } else {
                CurrentUserLabel.setText("-- Login Failed --");
                LoginButton.setText("Log In");
                disablePlayControls();
            }
        } else {
            CurrentUserLabel.setText("-- Please Log In --");
            LoginButton.setText("Log In");
            disablePlayControls();
        }
        LoginButton.setEnabled(true);
        
        
        if (Auth.isLoggedIn) {
            loadUserInstances(Auth.AccountName);
            if (!InstanceComboBox.getSelectedItem().toString().equals("<None>")) {
                String item = InstanceComboBox.getSelectedItem().toString();
                try {
                    JSONObject instanceConfig = Util.readJSONFile("./users/" + getFriendlyName(Auth.AccountName) + "/" + item + "/instance.json");
                    loadModpackPaneContent("./packs/" + instanceConfig.get("pack").toString());
                } catch (IOException ex) {
                    Logger.error("MainForm.formWindowOpened", "Failed to load instance config!", false, ex.getMessage());
                    loadModpackPaneContent("./data/content/nodesc");
                }
            } else {
                loadModpackPaneContent("./data/content/nopack");
            }
        } else {
            loadUserInstances(null);
            if (ModpackList.getModel().getSize() > 0) {
                ModpackList.setSelectedIndex(0);
                loadModpackPaneContent("./packs/" + ModpackList.getSelectedValue().toString());
            } else {
                loadModpackPaneContent("./data/content/nopack/");
            }
        }
        
        
        Logger.info("MainForm.formWindowOpened", "Finished loading.");
    }//GEN-LAST:event_formWindowOpened

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        this.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        this.getContentPane().setBackground(new Color(225, 225, 225));
    }//GEN-LAST:event_formWindowLostFocus
    

    private void loginDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loginDialogWindowOpened
        loginDialog.setLocationRelativeTo(null);
        loginDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_loginDialogWindowOpened

    private void loginDialogWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loginDialogWindowGainedFocus
        loginDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_loginDialogWindowGainedFocus

    private void loginDialogWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loginDialogWindowLostFocus
        loginDialog.getContentPane().setBackground(new Color(225, 225, 225));
    }//GEN-LAST:event_loginDialogWindowLostFocus

    
    private void progressDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_progressDialogWindowOpened
        progressDialog.setLocationRelativeTo(null);
        progressDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_progressDialogWindowOpened

    private void progressDialogWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_progressDialogWindowGainedFocus
        progressDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_progressDialogWindowGainedFocus

    private void progressDialogWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_progressDialogWindowLostFocus
        progressDialog.getContentPane().setBackground(new Color(225, 225, 225));
    }//GEN-LAST:event_progressDialogWindowLostFocus

    
    private void popupDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_popupDialogWindowOpened
        popupDialog.setLocationRelativeTo(null);
        popupDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_popupDialogWindowOpened

    private void popupDialogWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_popupDialogWindowGainedFocus
        popupDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_popupDialogWindowGainedFocus

    private void popupDialogWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_popupDialogWindowLostFocus
        popupDialog.getContentPane().setBackground(new Color(225, 225, 225));
    }//GEN-LAST:event_popupDialogWindowLostFocus

    
    private void instanceDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_instanceDialogWindowOpened
        instanceDialog.setLocationRelativeTo(null);
        instanceDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_instanceDialogWindowOpened

    private void instanceDialogWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_instanceDialogWindowGainedFocus
        instanceDialog.getContentPane().setBackground(new Color(152, 174, 196));
    }//GEN-LAST:event_instanceDialogWindowGainedFocus

    private void instanceDialogWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_instanceDialogWindowLostFocus
        instanceDialog.getContentPane().setBackground(new Color(225, 225, 225));
    }//GEN-LAST:event_instanceDialogWindowLostFocus

    
    private void loginDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginDialogCancelButtonActionPerformed
        loginDialog.setVisible(false);
    }//GEN-LAST:event_loginDialogCancelButtonActionPerformed

    private void loginDialogLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginDialogLoginButtonActionPerformed
        SwingWorker worker = new SwingWorker() {
            
            @Override
            protected void done() { }

            @Override
            protected void process(List chunks) { }
            
            @Override
            protected Object doInBackground() {
                
                loginDialog.setVisible(false);
                Dialogs.showProgressDialog();
                Dialogs.setProgressIndeterminate(true);
                
                Dialogs.setProgressCaption("Logging in...");
                Auth.performLogin(loginDialogUsernameBox.getText(), new String(loginDialogPasswordBox.getPassword()));
                
                Dialogs.hideProgressDialog();
                
                if (Auth.isLoggedIn) {
                    Auth.saveToFile();
                    
                    CurrentUserLabel.setText(Auth.Username);
                    LoginButton.setText("Log Out");
                    enablePlayControls();
                    loadUserInstances(Auth.AccountName);
                    
                    if (!InstanceComboBox.getSelectedItem().toString().equals("<None>")) {
                        String item = InstanceComboBox.getSelectedItem().toString();
                        try {
                            JSONObject instanceConfig = Util.readJSONFile("./users/" + getFriendlyName(Auth.AccountName) + "/" + item + "/instance.json");
                            loadModpackPaneContent("./packs/" + instanceConfig.get("pack").toString());
                        } catch (IOException ex) {
                            Logger.error("MainForm.formWindowOpened", "Failed to load instance config!", false, ex.getMessage());
                            loadModpackPaneContent("./data/content/nodesc");
                        }
                    } else {
                        loadModpackPaneContent("./data/content/nopack");
                    }
                } else {
                    Dialogs.showNotification("Unable to log in successfully!");
                    
                    CurrentUserLabel.setText("-- Login Failed --");
                    LoginButton.setText("Log In");
                    disablePlayControls();
                }
                
                return null;
                
            }
            
        };
        worker.execute();
    }//GEN-LAST:event_loginDialogLoginButtonActionPerformed

    
    private void instanceDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instanceDialogCancelButtonActionPerformed
        instanceDialog.setVisible(false);
    }//GEN-LAST:event_instanceDialogCancelButtonActionPerformed

    private void instanceDialogCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instanceDialogCreateButtonActionPerformed
        new File("./users/" + getFriendlyName(Auth.AccountName) + "/" + instanceDialogNameBox.getText()).mkdirs();
        JSONObject instanceConfig = new JSONObject();
        instanceConfig.put("name", instanceDialogNameBox.getText());
        instanceConfig.put("pack", instanceDialogModpackComboBox.getSelectedItem().toString());
        try {
            FileUtils.writeStringToFile(new File("./users/" + getFriendlyName(Auth.AccountName) + "/" + instanceDialogNameBox.getText() + "/instance.json"), instanceConfig.toJSONString());
        } catch (IOException ex) {
            Logger.error("MainForm.instanceDialogCreateButtonActionPerformed", "Could not create 'instance.json'!", false, ex.getMessage());
            return;
        }
        loadUserInstances(Auth.AccountName);
    }//GEN-LAST:event_instanceDialogCreateButtonActionPerformed

    
    private void popupDialogOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupDialogOkButtonActionPerformed
        popupDialog.setVisible(false);
    }//GEN-LAST:event_popupDialogOkButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            SeaGlassLookAndFeel laf = new SeaGlassLookAndFeel();
            javax.swing.UIManager.setLookAndFeel(laf);
            //javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
             if ("Nimbus".equals(info.getName())) {
             javax.swing.UIManager.setLookAndFeel(info.getClassName());
             break;
             }
             }*/
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateInstanceButton;
    private javax.swing.JLabel CurrentUserLabel;
    private javax.swing.JButton DeleteInstanceButton;
    private javax.swing.JCheckBox ForceUpdateCheckBox;
    private javax.swing.JComboBox InstanceComboBox;
    private javax.swing.JLabel InstanceLabel;
    private javax.swing.JButton LoginButton;
    private javax.swing.JTabbedPane MainTabPane;
    private javax.swing.JTextPane ModpackDescriptionPane;
    private javax.swing.JList ModpackList;
    private javax.swing.JPanel ModpackPanel;
    private javax.swing.JPanel NewsPanel;
    private javax.swing.JButton PlayButton;
    private javax.swing.JPanel SettingsPanel;
    private javax.swing.JDialog instanceDialog;
    private javax.swing.JButton instanceDialogCancelButton;
    private javax.swing.JButton instanceDialogCreateButton;
    private javax.swing.JComboBox instanceDialogModpackComboBox;
    private javax.swing.JLabel instanceDialogModpackLabel;
    private javax.swing.JTextField instanceDialogNameBox;
    private javax.swing.JLabel instanceDialogNameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog loginDialog;
    private javax.swing.JButton loginDialogCancelButton;
    private javax.swing.JButton loginDialogLoginButton;
    private javax.swing.JPasswordField loginDialogPasswordBox;
    private javax.swing.JLabel loginDialogPasswordLabel;
    private javax.swing.JTextField loginDialogUsernameBox;
    private javax.swing.JLabel loginDialogUsernameLabel;
    private javax.swing.JDialog popupDialog;
    private javax.swing.JLabel popupDialogCaptionLabel;
    private javax.swing.JLabel popupDialogImageLabel;
    private javax.swing.JButton popupDialogOkButton;
    public javax.swing.JDialog progressDialog;
    public javax.swing.JProgressBar progressDialogStatusBar;
    private javax.swing.JLabel progressDialogStatusLabel;
    // End of variables declaration//GEN-END:variables
}
