package com.dsdev.moddle;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.URL;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.commons.io.FileUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/**
 * The main GUI.
 *
 * @author Greenlock28
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PlayButton = new javax.swing.JButton();
        UsernameLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        UsernameField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        MainTabPane = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        ModpackDescriptionPane = new javax.swing.JTextPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        NewsContentPane = new javax.swing.JTextPane();
        CurrentUserLabel = new javax.swing.JLabel();
        LoginButton = new javax.swing.JButton();
        InstanceComboBox = new javax.swing.JComboBox();
        DeleteInstanceButton = new javax.swing.JButton();
        AddInstanceButton = new javax.swing.JButton();
        BaseModpackComboBox = new javax.swing.JComboBox();
        InstanceNameField = new javax.swing.JTextField();
        InstanceLabel = new javax.swing.JLabel();
        CreateInstanceButton = new javax.swing.JButton();
        ModpackLabel = new javax.swing.JLabel();
        InstanceNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Moddle Launcher");
        setMaximumSize(new java.awt.Dimension(800, 450));
        setMinimumSize(new java.awt.Dimension(800, 450));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        PlayButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PlayButton.setText("Play");
        PlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayButtonActionPerformed(evt);
            }
        });

        UsernameLabel.setForeground(new java.awt.Color(128, 128, 128));
        UsernameLabel.setText("Username:");

        PasswordLabel.setForeground(new java.awt.Color(128, 128, 128));
        PasswordLabel.setText("Password:");

        UsernameField.setEnabled(false);

        PasswordField.setEnabled(false);

        MainTabPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        MainTabPane.setName(""); // NOI18N

        ModpackDescriptionPane.setEditable(false);
        ModpackDescriptionPane.setBackground(new java.awt.Color(250, 250, 250));
        ModpackDescriptionPane.setBorder(null);
        jScrollPane3.setViewportView(ModpackDescriptionPane);

        MainTabPane.addTab("Modpack", jScrollPane3);
        MainTabPane.addTab("Settings", jTabbedPane1);

        NewsContentPane.setEditable(false);
        NewsContentPane.setBackground(new java.awt.Color(250, 250, 250));
        jScrollPane1.setViewportView(NewsContentPane);

        MainTabPane.addTab("News", jScrollPane1);

        CurrentUserLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CurrentUserLabel.setText("SixteenLongUName");

        LoginButton.setText("Log In");

        DeleteInstanceButton.setText("Delete");

        AddInstanceButton.setText("Add");

        BaseModpackComboBox.setEnabled(false);

        InstanceNameField.setEnabled(false);

        InstanceLabel.setText("Instance:");

        CreateInstanceButton.setText("Create");
        CreateInstanceButton.setEnabled(false);

        ModpackLabel.setForeground(new java.awt.Color(128, 128, 128));
        ModpackLabel.setText("Modpack:");

        InstanceNameLabel.setForeground(new java.awt.Color(128, 128, 128));
        InstanceNameLabel.setText("Instance Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LoginButton)
                    .addComponent(CurrentUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(PasswordLabel))
                    .addComponent(UsernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UsernameField)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(InstanceNameLabel)
                    .addComponent(ModpackLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BaseModpackComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InstanceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateInstanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InstanceLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InstanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddInstanceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DeleteInstanceButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayButton, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(MainTabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UsernameLabel)
                            .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CurrentUserLabel)
                            .addComponent(ModpackLabel)
                            .addComponent(BaseModpackComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InstanceLabel)
                            .addComponent(InstanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PasswordLabel)
                            .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LoginButton)
                            .addComponent(InstanceNameLabel)
                            .addComponent(InstanceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateInstanceButton)
                            .addComponent(AddInstanceButton)
                            .addComponent(DeleteInstanceButton)))
                    .addComponent(PlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayButtonActionPerformed
        
            try {
                FileUtils.writeStringToFile(Util.getFile("./lastlogin.dat"), UsernameField.getText() + "\n" + PasswordField.getText() + "\n" + BaseModpackComboBox.getSelectedItem().toString());
            } catch (Exception ex) { }

            if (UsernameField.getText().equals("")) {
                Logger.error("MainForm.PlayButtonActionPerformed", "No account name given!", true, "None");
                return;
            }
            
            if (PasswordField.getText().equals("")) {
                Logger.error("MainForm.PlayButtonActionPerformed", "No password given!", true, "None");
                return;
            }
            
            Logger.info("Logging in...");
            MinecraftLogin login = new MinecraftLogin();
            login.doLogin(UsernameField.getText(), PasswordField.getText());

            LaunchArgs launchArgs = new LaunchArgs();

            try {
                Logger.info("Applying global settings...");
                if (new File("./users/global.json").exists()) {
                    JSONObject globalConfig = Util.readJSONFile("./users/global.json");
                    launchArgs.loadSettings((JSONArray)globalConfig.get("settings"));
                } else {
                    Util.assertDirectoryExistence("./users");
                    FileUtils.writeStringToFile(new File("./users/global.json"), "{ settings : [ ] }");
                }
            } catch (Exception ex) { }

            try {
                Logger.info("Applying user settings...");
                if (new File("./users/" + login.Username + "/userprefs.json").exists()) {
                    JSONObject userConfig = Util.readJSONFile("./users/" + login.Username + "/userprefs.json");
                    launchArgs.loadSettings((JSONArray)userConfig.get("settings"));
                } else {
                    Util.assertDirectoryExistence("./users/" + login.Username);
                    FileUtils.writeStringToFile(new File("./users/" + login.Username + "/userprefs.json"), "{ settings : [ ] }");
                }
            } catch (Exception ex) { }
            
            try {
                Logger.info("Applying pack-specific settings...");
                String selectedPack = BaseModpackComboBox.getSelectedItem().toString();
                if (new File("./users/" + login.Username + "/" + selectedPack + ".json").exists()) {
                    JSONObject selpackConfig = Util.readJSONFile("./users/" + login.Username + "/" + selectedPack + ".json");
                    launchArgs.loadSettings((JSONArray)selpackConfig.get("settings"));
                } else {
                    Util.assertDirectoryExistence("./users/" + login.Username);
                    FileUtils.writeStringToFile(new File("./users/" + login.Username + "/" + selectedPack + ".json"), "{ settings : [ ] }");
                }
            } catch (Exception ex) { }

            Logger.info("Invoking pack builder...");
            Modpack pack = new Modpack(BaseModpackComboBox.getSelectedItem().toString(), UsernameField.getText());
            pack.build();

            Logger.info("Preparing to launch modpack...");
            pack.run(launchArgs, login);
    }//GEN-LAST:event_PlayButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {

            Logger.info("Startup", "Centering...");
            this.setLocationRelativeTo(null);

            Logger.info("Startup", "Loading icon...");
            this.setIconImage((new ImageIcon(this.getClass().getResource("icon_mb.png"))).getImage());

            Logger.info("Startup", "Clearing temporary file cache...");
            if (Util.getFile("./tmp").exists()) {
                FileUtils.deleteDirectory(Util.getFile("./tmp"));
            }
            
            Logger.info("Startup", "Loading modpacks...");
            BaseModpackComboBox.addItem("");
            for (File f : Util.getFile("./packs").listFiles()) {
                if (f.isDirectory()) {
                    BaseModpackComboBox.addItem(f.getName());
                }
            }
            
            /*Logger.info("Startup", "Loading last login info...");
            if (new File("./lastlogin.json").exists()) {
                JSONObject lastlogin = Util.readJSONFile("./lastlogin.dat");
                UsernameField.setText(lastloginLines[0]);
                PasswordField.setText(lastloginLines[1]);
                BaseModpackComboBox.setSelectedItem(lastloginLines[2]);
            }*/
            
            //<editor-fold defaultstate="collapsed" desc="Load modpack content">
            
            String selectedPack = BaseModpackComboBox.getSelectedItem().toString();
            Logger.info("Startup", "Loading Modpack description pane content (" + selectedPack + ")...");
            
            String contentLocation = "./tmp/launcher/" + selectedPack + "/";
            List<String> contentLines = FileUtils.readLines(new File("./tmp/launcher/" + selectedPack + "/description.txt"));
            SimpleAttributeSet keyWord = new SimpleAttributeSet();
            ModpackDescriptionPane.setText("");
            
            for (String line : contentLines) {
                
                if (line.startsWith("${{") && line.endsWith("}}")) {
                    String styleString = line.substring(3, line.length() - 2);
                    for (String style : styleString.split(",")) {
                        
                        String styleArg = style;
                        String styleValue = "";
                        
                        try {
                            styleArg = style.split(":")[0];
                            styleValue = style.split(":")[1];
                        } catch (Exception ex) { }
                        
                        Logger.info("Style", style);
                        
                        if (styleArg.equalsIgnoreCase("image")) {
                            ModpackDescriptionPane.insertIcon(new ImageIcon(contentLocation + styleValue));
                            ModpackDescriptionPane.getStyledDocument().insertString(ModpackDescriptionPane.getStyledDocument().getLength(), "\n", keyWord);
                        } else if (styleArg.equalsIgnoreCase("reset")) {
                            keyWord = new SimpleAttributeSet();
                        } else {
                            try {
                                for (Method m : StyleConstants.class.getMethods()) {
                                    if (m.getName().toLowerCase().equalsIgnoreCase("set" + styleArg)) {
                                        if (styleValue.equalsIgnoreCase("true") || styleValue.equalsIgnoreCase("false")) {
                                            m.invoke(null, new Object[] { keyWord, styleValue.equalsIgnoreCase("true") });
                                        } else if (Util.isNumeric(styleValue)) {
                                            m.invoke(null, new Object[] { keyWord, Integer.parseInt(styleValue) });
                                        } else {
                                            m.invoke(null, new Object[] { keyWord, styleValue });
                                        }
                                    }
                                }
                            } catch (Exception ex) {
                                Util.isNumeric("0");
                            }
                        }
                        
                    }
                } else {
                    ModpackDescriptionPane.getStyledDocument().insertString(ModpackDescriptionPane.getStyledDocument().getLength(), line + "\n", keyWord);
                }
                
            }
            
            ModpackDescriptionPane.setCaretPosition(0);
            
            //</editor-fold>
            
            //<editor-fold defaultstate="collapsed" desc="Load news content">
            
            Logger.info("Startup", "Fetching news...");
            
            InetAddress addr = InetAddress.getByName("sites.google.com");
            if (addr.isReachable(600)) {
                FileUtils.copyURLToFile(new URL("https://sites.google.com/site/moddleframework/news.zip"), new File("./news.zip"));
            } else {
                Logger.warning("Startup", "Failed to update news!");
            }
            
            try {
                Util.decompressZipfile("./news.zip", "./tmp/news/");
            } catch (IOException ex) {
                Logger.warning("Startup", "Failed to load news!");
            }
            
            contentLocation = "./tmp/news/";
            contentLines = FileUtils.readLines(new File("./tmp/news/content.txt"));
            keyWord = new SimpleAttributeSet();
            NewsContentPane.setText("");
            
            for (String line : contentLines) {
                
                if (line.startsWith("${{") && line.endsWith("}}")) {
                    String styleString = line.substring(3, line.length() - 2);
                    for (String style : styleString.split(",")) {
                        
                        String styleArg = style;
                        String styleValue = "";
                        
                        try {
                            styleArg = style.split(":")[0];
                            styleValue = style.split(":")[1];
                        } catch (Exception ex) { }
                        
                        Logger.info("Style", style);
                        
                        if (styleArg.equalsIgnoreCase("image")) {
                            NewsContentPane.insertIcon(new ImageIcon(contentLocation + styleValue));
                            NewsContentPane.getStyledDocument().insertString(NewsContentPane.getStyledDocument().getLength(), "\n", keyWord);
                        } else if (styleArg.equalsIgnoreCase("reset")) {
                            keyWord = new SimpleAttributeSet();
                        } else {
                            try {
                                for (Method m : StyleConstants.class.getMethods()) {
                                    if (m.getName().toLowerCase().equalsIgnoreCase("set" + styleArg)) {
                                        if (styleValue.equalsIgnoreCase("true") || styleValue.equalsIgnoreCase("false")) {
                                            m.invoke(null, new Object[] { keyWord, styleValue.equalsIgnoreCase("true") });
                                        } else if (Util.isNumeric(styleValue)) {
                                            m.invoke(null, new Object[] { keyWord, Integer.parseInt(styleValue) });
                                        } else {
                                            m.invoke(null, new Object[] { keyWord, styleValue });
                                        }
                                    }
                                }
                            } catch (Exception ex) {
                                Util.isNumeric("0");
                            }
                        }
                        
                    }
                } else {
                    NewsContentPane.getStyledDocument().insertString(NewsContentPane.getStyledDocument().getLength(), line + "\n", keyWord);
                }
                
            }
            
            NewsContentPane.setCaretPosition(0);
            
            //</editor-fold>
            
            Logger.info("Startup", "Finished loading.");

        } catch (Exception ex) {
            Logger.error("MainForm.formWindowOpened", ex.getMessage(), false, ex.getMessage());
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
             if ("Nimbus".equals(info.getName())) {
             javax.swing.UIManager.setLookAndFeel(info.getClassName());
             break;
             }
             }*/
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddInstanceButton;
    private javax.swing.JComboBox BaseModpackComboBox;
    private javax.swing.JButton CreateInstanceButton;
    private javax.swing.JLabel CurrentUserLabel;
    private javax.swing.JButton DeleteInstanceButton;
    private javax.swing.JComboBox InstanceComboBox;
    private javax.swing.JLabel InstanceLabel;
    private javax.swing.JTextField InstanceNameField;
    private javax.swing.JLabel InstanceNameLabel;
    private javax.swing.JButton LoginButton;
    private javax.swing.JTabbedPane MainTabPane;
    private javax.swing.JTextPane ModpackDescriptionPane;
    private javax.swing.JLabel ModpackLabel;
    private javax.swing.JTextPane NewsContentPane;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JButton PlayButton;
    private javax.swing.JTextField UsernameField;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
