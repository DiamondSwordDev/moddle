package com.dsdev.moddle;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.commons.io.FileUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/**
 * The main GUI.
 *
 * @author Greenlock28
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PlayButton = new javax.swing.JButton();
        UsernameLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        UsernameField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        MainTabPane = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        ModpackDescriptionPane = new javax.swing.JTextPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        NewsContentPane = new javax.swing.JTextPane();
        CurrentUserLabel = new javax.swing.JLabel();
        LoginButton = new javax.swing.JButton();
        InstanceComboBox = new javax.swing.JComboBox();
        DeleteInstanceButton = new javax.swing.JButton();
        AddInstanceButton = new javax.swing.JButton();
        BaseModpackComboBox = new javax.swing.JComboBox();
        InstanceNameField = new javax.swing.JTextField();
        InstanceLabel = new javax.swing.JLabel();
        CreateInstanceButton = new javax.swing.JButton();
        ModpackLabel = new javax.swing.JLabel();
        InstanceNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Moddle Launcher");
        setMinimumSize(new java.awt.Dimension(800, 450));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        PlayButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PlayButton.setText("Play");
        PlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayButtonActionPerformed(evt);
            }
        });

        UsernameLabel.setForeground(new java.awt.Color(128, 128, 128));
        UsernameLabel.setText("Username:");

        PasswordLabel.setForeground(new java.awt.Color(128, 128, 128));
        PasswordLabel.setText("Password:");

        UsernameField.setEnabled(false);

        PasswordField.setEnabled(false);

        MainTabPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        MainTabPane.setName(""); // NOI18N

        ModpackDescriptionPane.setEditable(false);
        ModpackDescriptionPane.setBackground(new java.awt.Color(250, 250, 250));
        ModpackDescriptionPane.setBorder(null);
        jScrollPane3.setViewportView(ModpackDescriptionPane);

        MainTabPane.addTab("Modpack", jScrollPane3);
        MainTabPane.addTab("Settings", jTabbedPane1);

        NewsContentPane.setEditable(false);
        NewsContentPane.setBackground(new java.awt.Color(250, 250, 250));
        jScrollPane1.setViewportView(NewsContentPane);

        MainTabPane.addTab("News", jScrollPane1);

        CurrentUserLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CurrentUserLabel.setText("Validating...");

        LoginButton.setText("Log Out");
        LoginButton.setEnabled(false);
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        InstanceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstanceComboBoxActionPerformed(evt);
            }
        });

        DeleteInstanceButton.setText("Delete");
        DeleteInstanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteInstanceButtonActionPerformed(evt);
            }
        });

        AddInstanceButton.setText("Add");
        AddInstanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddInstanceButtonActionPerformed(evt);
            }
        });

        BaseModpackComboBox.setEnabled(false);

        InstanceNameField.setEnabled(false);

        InstanceLabel.setText("Instance:");

        CreateInstanceButton.setText("Create");
        CreateInstanceButton.setEnabled(false);
        CreateInstanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateInstanceButtonActionPerformed(evt);
            }
        });

        ModpackLabel.setForeground(new java.awt.Color(128, 128, 128));
        ModpackLabel.setText("Modpack:");

        InstanceNameLabel.setForeground(new java.awt.Color(128, 128, 128));
        InstanceNameLabel.setText("Instance Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LoginButton)
                    .addComponent(CurrentUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PasswordLabel)
                    .addComponent(UsernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UsernameField)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(InstanceNameLabel)
                    .addComponent(ModpackLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BaseModpackComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InstanceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateInstanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InstanceLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InstanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddInstanceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DeleteInstanceButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayButton, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(MainTabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UsernameLabel)
                            .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CurrentUserLabel)
                            .addComponent(ModpackLabel)
                            .addComponent(BaseModpackComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InstanceLabel)
                            .addComponent(InstanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PasswordLabel)
                            .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LoginButton)
                            .addComponent(InstanceNameLabel)
                            .addComponent(InstanceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateInstanceButton)
                            .addComponent(AddInstanceButton)
                            .addComponent(DeleteInstanceButton)))
                    .addComponent(PlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void loadModpackPaneContent(String contentLocation) {
        
        if (!new File(contentLocation + "/description.txt").exists()) {
            contentLocation = "./data/content/nodesc/";
        }
        
        try {
            List<String> contentLines = FileUtils.readLines(new File(contentLocation + "/description.txt"));
            SimpleAttributeSet keyWord = new SimpleAttributeSet();
            ModpackDescriptionPane.setText("");

            for (String line : contentLines) {

                if (line.startsWith("${{") && line.endsWith("}}")) {
                    String styleString = line.substring(3, line.length() - 2);
                    for (String style : styleString.split(",")) {

                        String styleArg = style;
                        String styleValue = "";

                        try {
                            styleArg = style.split(":")[0];
                            styleValue = style.split(":")[1];
                        } catch (Exception ex) { }

                        if (styleArg.equalsIgnoreCase("image")) {
                            ModpackDescriptionPane.insertIcon(new ImageIcon(contentLocation + styleValue));
                            ModpackDescriptionPane.getStyledDocument().insertString(ModpackDescriptionPane.getStyledDocument().getLength(), "\n", keyWord);
                        } else if (styleArg.equalsIgnoreCase("reset")) {
                            keyWord = new SimpleAttributeSet();
                        } else {
                            try {
                                for (Method m : StyleConstants.class.getMethods()) {
                                    if (m.getName().toLowerCase().equalsIgnoreCase("set" + styleArg)) {
                                        if (styleValue.equalsIgnoreCase("true") || styleValue.equalsIgnoreCase("false")) {
                                            m.invoke(null, new Object[] { keyWord, styleValue.equalsIgnoreCase("true") });
                                        } else if (Util.isNumeric(styleValue)) {
                                            m.invoke(null, new Object[] { keyWord, Integer.parseInt(styleValue) });
                                        } else {
                                            m.invoke(null, new Object[] { keyWord, styleValue });
                                        }
                                    }
                                }
                            } catch (Exception ex) {
                                Util.isNumeric("0");
                            }
                        }

                    }
                } else {
                    ModpackDescriptionPane.getStyledDocument().insertString(ModpackDescriptionPane.getStyledDocument().getLength(), line + "\n", keyWord);
                }

            }
        } catch (Exception ex) {
            Logger.error("MainForm.loadModpackPaneContent", "Failed to load content!", false, ex.getMessage());
        }

        ModpackDescriptionPane.setCaretPosition(0);
        
    }
    
    private void disableLoginFields() {
        LoginButton.setText("Log Out");
        UsernameLabel.setForeground(new Color(128, 128, 128));
        PasswordLabel.setForeground(new Color(128, 128, 128));
        UsernameField.setEnabled(false);
        PasswordField.setEnabled(false);
    }
    
    private void enableLoginFields() {
        CurrentUserLabel.setText("Please log in  ------>");
        LoginButton.setText("Log In");
        UsernameLabel.setForeground(new Color(0, 0, 0));
        PasswordLabel.setForeground(new Color(0, 0, 0));
        UsernameField.setEnabled(true);
        PasswordField.setEnabled(true);
    }
    
    private void doLogin(String username, String password, String instance) {
        Logger.info("MainForm.doLogin", "Logging in...");
        String loginResult = LoginHelper.doPasswordLogin(username, password);
        
        if (loginResult.equals("Success")) {
            
            Logger.info("MainForm.doLogin", "Login successful!");
            
            if (!UsernameField.getText().equals(username))
                UsernameField.setText(username);
            
            if (!PasswordField.getText().equals(password))
                PasswordField.setText(password);
            
            CurrentUserLabel.setText(LoginHelper.Username);
            
            disableLoginFields();
            
            loadUserInstances(UsernameField.getText());
            
            if (instance != null)
                InstanceComboBox.setSelectedItem(instance);
            
        } else {
            Logger.info("MainForm.doLogin", "Login failed!");
            InstanceComboBox.removeAllItems();
            InstanceComboBox.addItem("<None>");
            enableLoginFields();
            CurrentUserLabel.setText(loginResult + "  ---->");
        }
    }
    
    private void loadUserInstances(String username) {
        
        Logger.info("MainForm.loadUserInstances", "Loading instances...");
        
        InstanceComboBox.removeAllItems();
        InstanceComboBox.addItem("<None>");
        
        if (new File("./users/" + username.replace("@", "_")).isDirectory()) {
            if (new File("./users/" + username.replace("@", "_")).listFiles() != null) {
                for (File f : new File("./users/" + username.replace("@", "_")).listFiles()) {
                    if (f.isDirectory()) {
                        InstanceComboBox.addItem(f.getName());
                    }
                }
            } else {
                Logger.warning("Weird error.");
            }
        } else {
            new File("./users/" + username.replace("@", "_")).mkdirs();
        }
        
    }
    
    private boolean newInstanceEnabled = false;
    
    private void enableNewInstanceFields() {
        ModpackLabel.setForeground(new Color(0, 0, 0));
        InstanceNameLabel.setForeground(new Color(0, 0, 0));
        BaseModpackComboBox.setEnabled(true);
        InstanceNameField.setEnabled(true);
        
        CreateInstanceButton.setEnabled(true);
        AddInstanceButton.setEnabled(false);
        DeleteInstanceButton.setText("Cancel");
        
        InstanceComboBox.setEnabled(false);
        InstanceLabel.setForeground(new Color(128, 128, 128));
    }
    
    private void disableNewInstanceFields() {
        ModpackLabel.setForeground(new Color(128, 128, 128));
        InstanceNameLabel.setForeground(new Color(128, 128, 128));
        BaseModpackComboBox.setEnabled(false);
        InstanceNameField.setEnabled(false);
        
        CreateInstanceButton.setEnabled(false);
        AddInstanceButton.setEnabled(true);
        DeleteInstanceButton.setText("Delete");
        
        InstanceComboBox.setEnabled(true);
        InstanceLabel.setForeground(new Color(0, 0, 0));
    }
    
    
    private void PlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayButtonActionPerformed
        
            try {
                FileUtils.writeStringToFile(Util.getFile("./lastlogin.dat"), UsernameField.getText() + "\n" + PasswordField.getText() + "\n" + BaseModpackComboBox.getSelectedItem().toString());
            } catch (Exception ex) { }

            if (UsernameField.getText().equals("")) {
                Logger.error("MainForm.PlayButtonActionPerformed", "No account name given!", true, "None");
                return;
            }
            
            if (PasswordField.getText().equals("")) {
                Logger.error("MainForm.PlayButtonActionPerformed", "No password given!", true, "None");
                return;
            }
            
            Logger.info("Logging in...");
            MinecraftLogin login = new MinecraftLogin();
            login.doLogin(UsernameField.getText(), PasswordField.getText());

            LaunchArgs launchArgs = new LaunchArgs();

            try {
                Logger.info("Applying global settings...");
                if (new File("./users/global.json").exists()) {
                    JSONObject globalConfig = Util.readJSONFile("./users/global.json");
                    launchArgs.loadSettings((JSONArray)globalConfig.get("settings"));
                } else {
                    Util.assertDirectoryExistence("./users");
                    FileUtils.writeStringToFile(new File("./users/global.json"), "{ settings : [ ] }");
                }
            } catch (Exception ex) { }

            try {
                Logger.info("Applying user settings...");
                if (new File("./users/" + login.Username + "/userprefs.json").exists()) {
                    JSONObject userConfig = Util.readJSONFile("./users/" + login.Username + "/userprefs.json");
                    launchArgs.loadSettings((JSONArray)userConfig.get("settings"));
                } else {
                    Util.assertDirectoryExistence("./users/" + login.Username);
                    FileUtils.writeStringToFile(new File("./users/" + login.Username + "/userprefs.json"), "{ settings : [ ] }");
                }
            } catch (Exception ex) { }
            
            try {
                Logger.info("Applying pack-specific settings...");
                String selectedPack = BaseModpackComboBox.getSelectedItem().toString();
                if (new File("./users/" + login.Username + "/" + selectedPack + ".json").exists()) {
                    JSONObject selpackConfig = Util.readJSONFile("./users/" + login.Username + "/" + selectedPack + ".json");
                    launchArgs.loadSettings((JSONArray)selpackConfig.get("settings"));
                } else {
                    Util.assertDirectoryExistence("./users/" + login.Username);
                    FileUtils.writeStringToFile(new File("./users/" + login.Username + "/" + selectedPack + ".json"), "{ settings : [ ] }");
                }
            } catch (Exception ex) { }

            Logger.info("Invoking pack builder...");
            Modpack pack = new Modpack(BaseModpackComboBox.getSelectedItem().toString(), UsernameField.getText());
            pack.build();

            Logger.info("Preparing to launch modpack...");
            pack.run(launchArgs, login);
    }//GEN-LAST:event_PlayButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        Logger.info("MainForm.formWindowOpened", "Centering JFrame...");
        this.setLocationRelativeTo(null);

        Logger.info("MainForm.formWindowOpened", "Loading icon...");
        this.setIconImage((new ImageIcon(this.getClass().getResource("icon_mb.png"))).getImage());

        Logger.info("MainForm.formWindowOpened", "Clearing temporary file cache...");
        if (new File("./tmp").exists()) {
            try {
                FileUtils.deleteDirectory(new File("./tmp"));
            } catch (IOException ex) {
                Logger.error("MainForm.formWindowOpened", "Failed to clear temp file cache!", false, ex.getMessage());
            }
        }

        Logger.info("MainForm.formWindowOpened", "Loading modpacks...");
        BaseModpackComboBox.addItem("<None>");
        if (new File("./packs").isDirectory()) {
            for (File f : new File("./packs").listFiles()) {
                if (f.isDirectory()) {
                    BaseModpackComboBox.addItem(f.getName());
                }
            }
        } else {
            Logger.info("MainForm.formWindowOpened", "Creating packs directory...");
            new File("./packs").mkdirs();
        }
        

        
        Logger.info("MainForm.formWindowOpened", "Restoring last login...");
        if (new File("./lastlogin.json").exists()) {
            JSONObject lastlogin = null;
            try {
                lastlogin = Util.readJSONFile("./lastlogin.json");
            } catch (Exception ex) {
                Logger.error("MainForm.formWindowOpened", "Failed to load lastlogin!", false, ex.getMessage());
                enableLoginFields();
            }
            
            if (lastlogin != null) {
                doLogin((String)lastlogin.get("username"), (String)lastlogin.get("password"), (String)lastlogin.get("instance"));
            }
        } else {
            enableLoginFields();
        }
        LoginButton.setEnabled(true);

        
        
        Logger.info("MainForm.formWindowOpened", "Loading content for selected instance...");
        String selectedInstance = InstanceComboBox.getSelectedItem().toString();

        if (UsernameField.getText() != null) {
            if (!selectedInstance.equals("<None>")) {
                loadModpackPaneContent("./users/" + UsernameField.getText().replace("@", "_") + "/" + selectedInstance + "/ark/");
            } else {
                loadModpackPaneContent("./data/content/nopack/");
            }
        } else {
            loadModpackPaneContent("./data/content/nopack/");
        }
        
        //<editor-fold defaultstate="collapsed" desc="Load news content (Old)">

        /*Logger.info("Startup", "Fetching news...");

        InetAddress addr = InetAddress.getByName("sites.google.com");
        if (addr.isReachable(600)) {
            FileUtils.copyURLToFile(new URL("https://sites.google.com/site/moddleframework/news.zip"), new File("./news.zip"));
        } else {
            Logger.warning("Startup", "Failed to update news!");
        }

        try {
            Util.decompressZipfile("./news.zip", "./tmp/news/");
        } catch (IOException ex) {
            Logger.warning("Startup", "Failed to load news!");
        }

        contentLocation = "./tmp/news/";
        contentLines = FileUtils.readLines(new File("./tmp/news/content.txt"));
        keyWord = new SimpleAttributeSet();
        NewsContentPane.setText("");

        for (String line : contentLines) {

            if (line.startsWith("${{") && line.endsWith("}}")) {
                String styleString = line.substring(3, line.length() - 2);
                for (String style : styleString.split(",")) {

                    String styleArg = style;
                    String styleValue = "";

                    try {
                        styleArg = style.split(":")[0];
                        styleValue = style.split(":")[1];
                    } catch (Exception ex) { }

                    Logger.info("Style", style);

                    if (styleArg.equalsIgnoreCase("image")) {
                        NewsContentPane.insertIcon(new ImageIcon(contentLocation + styleValue));
                        NewsContentPane.getStyledDocument().insertString(NewsContentPane.getStyledDocument().getLength(), "\n", keyWord);
                    } else if (styleArg.equalsIgnoreCase("reset")) {
                        keyWord = new SimpleAttributeSet();
                    } else {
                        try {
                            for (Method m : StyleConstants.class.getMethods()) {
                                if (m.getName().toLowerCase().equalsIgnoreCase("set" + styleArg)) {
                                    if (styleValue.equalsIgnoreCase("true") || styleValue.equalsIgnoreCase("false")) {
                                        m.invoke(null, new Object[] { keyWord, styleValue.equalsIgnoreCase("true") });
                                    } else if (Util.isNumeric(styleValue)) {
                                        m.invoke(null, new Object[] { keyWord, Integer.parseInt(styleValue) });
                                    } else {
                                        m.invoke(null, new Object[] { keyWord, styleValue });
                                    }
                                }
                            }
                        } catch (Exception ex) {
                            Util.isNumeric("0");
                        }
                    }

                }
            } else {
                NewsContentPane.getStyledDocument().insertString(NewsContentPane.getStyledDocument().getLength(), line + "\n", keyWord);
            }

        }

        NewsContentPane.setCaretPosition(0);*/

        //</editor-fold>

        Logger.info("MainForm.formWindowOpened", "Finished loading.");
    }//GEN-LAST:event_formWindowOpened

    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
        if (LoginButton.getText().equals("Log Out")) {
            LoginHelper.doSystemLogout();
            enableLoginFields();
        } else {
            doLogin(UsernameField.getText(), PasswordField.getText(), null);
        }
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void InstanceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstanceComboBoxActionPerformed
        
        try {
        
            String selectedInstance = InstanceComboBox.getSelectedItem().toString();

            if (UsernameField.getText() != null) {
                if (!selectedInstance.equals("<None>")) {
                    loadModpackPaneContent("./users/" + UsernameField.getText().replace("@", "_") + "/" + selectedInstance + "/ark/");
                } else {
                    loadModpackPaneContent("./data/content/nopack/");
                }
            } else {
                loadModpackPaneContent("./data/content/nopack/");
            }
        
        } catch (Exception ex) { }
        
    }//GEN-LAST:event_InstanceComboBoxActionPerformed

    private void AddInstanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddInstanceButtonActionPerformed
        enableNewInstanceFields();
        newInstanceEnabled = true;
    }//GEN-LAST:event_AddInstanceButtonActionPerformed

    private void DeleteInstanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteInstanceButtonActionPerformed
        if (newInstanceEnabled) {
            disableNewInstanceFields();
            newInstanceEnabled = false;
        } else {
            try {
                FileUtils.deleteDirectory(new File("./users/" + UsernameField.getText().replace("@", "_") + "/" + InstanceComboBox.getSelectedItem().toString()));
                loadUserInstances(UsernameField.getText());
            } catch (IOException ex) {
                Logger.error("MainForm.DeleteInstanceButtonActionPerformed", "Failed to delete instance!", false, ex.getMessage());
            }
        }
    }//GEN-LAST:event_DeleteInstanceButtonActionPerformed

    private void CreateInstanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateInstanceButtonActionPerformed
        if (BaseModpackComboBox.getSelectedItem().toString().equals("<None>")) {
            return;
        }
        
        try {
            FileUtils.copyDirectory(new File("./packs/" + BaseModpackComboBox.getSelectedItem().toString()), new File("./users/" + UsernameField.getText().replace("@", "_") + "/" + InstanceNameField.getText() + "/ark"));
        } catch (IOException ex) {
            Logger.error("MainForm.CreateInstanceButtonActionPerformed", "Failed to create instance!", false, ex.getMessage());
        }
        
        disableNewInstanceFields();
        loadUserInstances(UsernameField.getText());
    }//GEN-LAST:event_CreateInstanceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
             if ("Nimbus".equals(info.getName())) {
             javax.swing.UIManager.setLookAndFeel(info.getClassName());
             break;
             }
             }*/
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddInstanceButton;
    private javax.swing.JComboBox BaseModpackComboBox;
    private javax.swing.JButton CreateInstanceButton;
    private javax.swing.JLabel CurrentUserLabel;
    private javax.swing.JButton DeleteInstanceButton;
    private javax.swing.JComboBox InstanceComboBox;
    private javax.swing.JLabel InstanceLabel;
    private javax.swing.JTextField InstanceNameField;
    private javax.swing.JLabel InstanceNameLabel;
    private javax.swing.JButton LoginButton;
    private javax.swing.JTabbedPane MainTabPane;
    private javax.swing.JTextPane ModpackDescriptionPane;
    private javax.swing.JLabel ModpackLabel;
    private javax.swing.JTextPane NewsContentPane;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JButton PlayButton;
    private javax.swing.JTextField UsernameField;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
